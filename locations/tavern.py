from random import randint
from misc.consts import *
from time import sleep

FOOD_OPTIONS = {
    '1': {NAME: '–ú—è—Å–Ω–æ–µ —Ä–∞–≥—É', PRICE_KEY: 10, HEALTH_KEY: 5},
    '2': {NAME: '–ö—Ä—É–∂–∫–∞ –∫–≤–∞—Å–∞', PRICE_KEY: 2, HEALTH_KEY: 2},
}

SPECIAL_VALUES = {
    '0': {FREE_COUNT_FOOD: 1},
    '1': {HAVE_FREE_FOOD: False},
}


def tavern(character: callable):
    """One of three locations
    :param character: It used to transmit character's params"""
    while True:
        if character.money < 0 and SPECIAL_VALUES.get('0', {}).get(FREE_COUNT_FOOD, 0) >= 1:
            SPECIAL_VALUES['1'][HAVE_FREE_FOOD] = True
            print(f'{HEADER} –û–±–æ–±—Ä–∞–Ω–Ω—ã–π –∏ –ø–æ–±–∏—Ç—ã–π –≤—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ —Ç–∞–≤–µ—Ä–Ω—É...:')
            sleep(3)
            print(f'{HEADER} –•–æ–∑—è–∏–Ω —Ç–∞–≤–µ—Ä–Ω—ã, —É–≤–∏–¥–µ–≤ –≤–∞—Å –≤ —Ç–∞–∫–æ–º –ª–∏—Ü–µ, —Ä–µ—à–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤–∞—Å –Ω–∞–∫–æ—Ä–º–∏—Ç—å')
            sleep(3)
            FOOD_OPTIONS['1'][PRICE_KEY] = 0
            FOOD_OPTIONS['2'][PRICE_KEY] = 0
            SPECIAL_VALUES['0'][FREE_COUNT_FOOD] -= 1

        input(f'{PRESS_ENTER} –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...')
        print(CLEAR_SCREEN)
        print(f'{HEADER} –í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –±–æ–ª—å—à–æ–π –¥–æ–º, –æ–∫–æ–ª–æ –±–∞—Ä–Ω–æ–π —Å—Ç–æ–π–∫–∏ —Å—Ç–æ–∏—Ç —Ö–æ–∑—è–∏–Ω —Ç–∞–≤–µ—Ä–Ω—ã, –æ–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –æ–±–µ–¥:')
        sleep(3)
        print()

        print(f'{TEMP_NUMERATION[0]} –í—ã—Ö–æ–¥ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏')
        sleep(0.35)
        for key, option in FOOD_OPTIONS.items():
            print(f"{TEMP_NUMERATION[int(key)]}Ô∏è [{option.get(NAME)}] ‚û§ "
                  f"{option.get(PRICE_KEY)} ü™ô "
                  f"‚ûï {option.get(HEALTH_KEY)} ‚ù§Ô∏è")
            sleep(0.35)
        print()

        meal = input(PROMPT)
        print()

        if meal == '0':
            return

        # Look up the selected option using get() to avoid KeyError if the key is not present
        selected_option = FOOD_OPTIONS.get(meal, '')

        # Get the price of the selected option, defaulting to 0 if the PRICE_KEY is not found
        price = selected_option.get(PRICE_KEY, 0)

        # Get whether or not the player has free food, defaulting to False if '1' or HAVE_FREE_FOOD is not found
        has_free_food = SPECIAL_VALUES.get('1', {}).get(HAVE_FREE_FOOD, False)

        if not selected_option:
            # If the key isn't found, print an error message and return
            print(f'{HEADER} –ó–∞ –≤–∞—à—É –Ω–µ–æ—Ç–µ—Å–∞–Ω–Ω—É—é –≥—Ä—É–±–æ—Å—Ç—å —Ö–æ–∑—è–∏–Ω —Ç–∞–≤–µ—Ä–Ω—ã –≤–∞—Å –ø—Ä–æ–≥–Ω–∞–ª.')
            sleep(3)
            print(f'{HEADER} –ü–æ—Ö–æ–∂–µ, —Ö–æ–∑—è–∏–Ω —Ç–∞–≤–µ—Ä–Ω—ã —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å –≤–∞–º–∏ —Å –±–æ–ª—å—à–µ–π.... –Ω–∞—Ü–µ–Ω–∫–æ–π')
            sleep(3)

            FOOD_OPTIONS['1'][PRICE_KEY] += randint(2, 8)
            FOOD_OPTIONS['2'][PRICE_KEY] += randint(4, 10)
            return

        elif character.money < price and not has_free_food:
            # If the player doesn't have enough money and doesn't have free food, print a message
            sleep(3)
            print(f'{HEADER} –í—ã –Ω–∏—â–∏–π, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–∏—â–∏–π...')

        else:
            # Subtract the price from the player's money and add its health benefit to their health
            spent_money = selected_option.get(PRICE_KEY, 0)
            got_hp = selected_option.get(HEALTH_KEY, 0)

            character.spend_money(selected_option.get(PRICE_KEY, 0))
            character.get_hp(selected_option.get(HEALTH_KEY, 0))

            SPECIAL_VALUES['1'][HAVE_FREE_FOOD] = False

            print(f'{GAME_ATTENTION} –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {spent_money} {MONEY} ')
            sleep(3)
            print(f'{GAME_ATTENTION} –í—ã –ø–æ–ª—É—á–∏–ª–∏ {got_hp} –µ–¥ {HEART}')
            sleep(3)
            print(f'{GAME_ATTENTION} –í–∞—à–µ {HEART} —Ç–µ–ø–µ—Ä—å: {character.show_hp()} –µ–¥')
            sleep(3)
            FOOD_OPTIONS['1'][PRICE_KEY] = 10
            FOOD_OPTIONS['2'][PRICE_KEY] = 5

        print()
        print(f'{HEADER} –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–∞–ø–µ–∑—É?')
        print()
        print(f'{TEMP_NUMERATION[1]} –î–∞')
        print(f'{TEMP_NUMERATION[2]} –ù–µ—Ç')
        print()

        continued = input(f'{PROMPT}')

        if continued == '1':
            pass
        elif continued == '2':
            return
        else:
            print(f"Shapilov {SHAPILOV * 3}")
            return
