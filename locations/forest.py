from time import sleep
from random import randint
from misc.consts import HEADER, CLEAR_SCREEN, PRESS_ENTER


def forest(character: callable, enemy: callable, battle_system: callable):
    """One of three locations
    :param battle_system: It used to transmit battle class methods
    :param character: It used to transmit character's params
    :param enemy: It used to transmit enemy's params"""

    # Prompt user to continue and clear the screen
    input(f'{PRESS_ENTER} –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...')
    print(CLEAR_SCREEN)

    # Print location description
    print(f'{HEADER} –í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –æ–ø—É—à–∫–µ –æ–≥—Ä–æ–º–Ω–æ–≥–æ –ª–µ—Å–∞, –¥–µ—Ä–µ–≤—å—è —à—É–º—è—Ç —Å–≤–æ–∏–º–∏ –æ–≥—Ä–æ–º–Ω—ã–º–∏ –∫—Ä–æ–Ω–∞–º–∏...')
    print(f'{HEADER} —Ç—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à –ø—É—Ç—å –∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç–∞...')
    sleep(0.5)

    # Introduce the enemy
    print()
    print(HEADER, f'–û –ù–ï–¢, {character.name}, –≤–∞—Å –∞—Ç–∞–∫–æ–≤–∞–ª {enemy.type}!')

    # Start battle loop
    while True:
        # Display battle information and prompt character to perform an action
        battle_system.battle_info(character, enemy)
        battle_system.character_perform(character, enemy)

        # Check if the enemy is defeated
        if not enemy.alive:
            # Print victory message and reward the character
            print(f'{HEADER} –í—ã –ø–æ–±–µ–¥–∏–ª–∏!!! –í—ã - –Ω–∞—Å—Ç–æ—è—â–∏–π –±–æ–µ—Ü')
            earned_money = randint(10, 100)
            character.earn_money(earned_money)
            earned_xp = randint(13, 50)
            character.earn_xp(earned_xp)
            print()
            print(f'üíé –ù–ê–ì–†–ê–î–´ üíé  ')
            print()
            print(f'‚û°Ô∏è {earned_money} ü™ô')
            print(f'‚û°Ô∏è {earned_xp} ‚ú®')
            return

        # Clear the screen and pause before the enemy's turn
        battle_system.pause_clear()

        # Enemy performs its action
        battle_system.enemy_perform(character, enemy)
        battle_system.pause_clear()

        # Check if the character is defeated
        if not character.alive:
            return
